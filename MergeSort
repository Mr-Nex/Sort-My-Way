public class Solve{

	public static void main(String[] args) throws java.lang.Exception {
       Scanner sc = new Scanner(System.in);  
       //array of around 600 elements
       int[] arr = {9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,23443590,871364529};
       long start = System.currentTimeMillis();
       mergeSort(arr,0,arr.length-1);
       long end = System.currentTimeMillis();
       System.out.println("Insertion sort time :: "+(end-start)+" ms.");
       for(int i=0;i<arr.length;i++) {
    	   System.out.print(arr[i]+" ");
       }
	}
	
	static void mergeSort(int[] arr, int start, int end) {
		if(start < end) {
			int mid = (start+end)/2;
			mergeSort(arr,start,mid);
			mergeSort(arr,mid+1,end);
			merge(arr,start,mid,end);
		}
	}
	
	static void merge(int[] arr,int start, int mid, int end) {
		int l = mid-start+1;
		int r = end-mid;
		
		int[] left = new int[l];
		int[] right = new int[r];
		
		for(int i=0;i<l;i++) {
			left[i] = arr[start+i];
		}
		for(int i=0;i<r;i++) {
			right[i] = arr[mid+1+i];
		}
		
		int i=0, j=0, ctr=start;
		
		while(i<l && j<r) {
			if(left[i] < right[j]) {
				arr[ctr] = left[i];
				i++;
				ctr++;
			}else {
				arr[ctr] = right[j];
				j++;
				ctr++;
			}
		}
		
		while(i<l) {
			arr[ctr] = left[i];
			i++;
			ctr++;
		}
		while(j<r) {
			arr[ctr] = right[j];
			j++;
			ctr++;
		}
	}
}