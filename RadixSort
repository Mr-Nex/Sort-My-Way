public class Solve{

	public static void main(String[] args) throws java.lang.Exception {
       Scanner sc = new Scanner(System.in);  
       //array of around 600 elements
       int[] arr = {9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,23443590,871364529};
       long start = System.currentTimeMillis();
       radixSort(arr);
       long end = System.currentTimeMillis();
       System.out.println("Radix sort time :: "+(end-start)+" ms.");
       for(int i=0;i<arr.length;i++) {
    	   System.out.print(arr[i]+" ");
       }
	}
	
	static void radixSort(int[] arr) {
		
		int max = findMaxSize(arr);
		
		for(int i=0;i<max;i++) {
			int[][] buckets = new int[10][arr.length];
			int[] bucketCounter = new int[10];
			
			for(int j=0;j<arr.length;j++) {
				int digit = findDigit(arr[j],i);
				
				buckets[digit][bucketCounter[digit]] = arr[j];
				bucketCounter[digit]++;
			}
			
			int ctr=0;
			for(int j=0;j<10;j++) {
				for(int k=0;k<bucketCounter[j];k++) {
					arr[ctr] = buckets[j][k];
					ctr++;
				}
			}
		}
		
	}
	
	static int findDigit(int num, int index) {
		
		int digit = (int) Math.abs((num/(Math.pow(10, index))) % 10);
		return digit;
	}
	
	static int findMaxSize(int[] arr) {
		
		int max=0;
		for(int i=0;i<arr.length;i++) {
			int len = findDigitCount(arr[i]);
			max = Math.max(max, len);
		}
		
		return max;
		
	}
	
	static int findDigitCount(int num) {
		if(num == 0)
			return 1;
		return (int) (Math.log10(num) + 1);
	}
}




-------------------------------------------------    Another Way    ------------------------------------------------------




public class Solve{

	public static void main(String[] args) throws java.lang.Exception {
       Scanner sc = new Scanner(System.in);  
       //array of around 600 elements
       int[] arr = {9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,9,8,7,12,23,34,45,56,67,78,89,98,87,76,65,54,43,32,32435,537657,34234,657658,5435,3421,343,325,36,547,4,876,487,987654321,123456789,999999999,657,63,754,61,465,37,356,8,5,876,48,478,5367856,387865845,2,7,5,756,8,68,56,8,56,8,568,67,8568,6,34,567,12,346,978,999,122,111,5,4,3,2,1,0,23443590,871364529};
       long start = System.currentTimeMillis();
       radixSort(arr);
       long end = System.currentTimeMillis();
       System.out.println("Radix sort time :: "+(end-start)+" ms.");
       for(int i=0;i<arr.length;i++) {
    	   System.out.print(arr[i]+" ");
       }
	}
	
	static void radixSort(int[] arr) {
		
		int max = findMaxSize(arr);
		
		for(int j=0;j<max;j++) {
			int[] count = new int[10];
			int[] res = new int[arr.length];
			
			for(int i=0;i<arr.length;i++) {
				int digit = findDigit(arr[i],j);
				count[digit]++;
			}
			
			for(int i=1;i<count.length;i++) {
				count[i]+=count[i-1];
			}
			
			for(int i=arr.length-1;i>=0;i--) {
				int digit = findDigit(arr[i],j);
				res[count[digit]-1] = arr[i];
				count[digit]--;
			}
			
			for(int i=0;i<arr.length;i++) {
				arr[i] = res[i];
			}
		}
		
	}
	
	static int findDigit(int num, int index) {
		
		int digit = (int) Math.abs((num/(Math.pow(10, index))) % 10);
		return digit;
	}
	
	static int findMaxSize(int[] arr) {
		
		int max=0;
		for(int i=0;i<arr.length;i++) {
			int len = findDigitCount(arr[i]);
			max = Math.max(max, len);
		}
		
		return max;
		
	}
	
	static int findDigitCount(int num) {
		if(num == 0)
			return 1;
		return (int) (Math.log10(num) + 1);
	}
}